#include<iostream>  //заголовок std::cout << lllll << std::endl;
#include<locale.h> // заголовочгый файл для функции setlocale()
#include<iomanip> // заголовочный файл для cout, « и много чего еще
#include<bitset>

//Тема 1. ОПЕРАТОРЫ C/C++ СТРОЕНИЕ МИНИМАЛЬНОЙ ПРОГРАММЫ C/C++

#pragma region MainFunc2
//во-первых - функция, во-вторых точка входа 
//во всей программе должна быть одна функция main();

//1.Условные переходы
// 1.1 оператов if.... и else...

int main()
{
	setlocale(LC_ALL, "Russian");
	int salary = 120000;
	bool has_education = true;
	if (salary < 150000)		//в скобках должна быть логическое переменая или условие
								//выдающее 
								//все что внутри скобок if выполняется если условие в круглых скобках равно true
	{
		std::cout << "зашли под if" << std::endl;
	}
	std::string name;
	std::cout << "\n \n Введите ваше имя" << std::endl;
	std::cin >> name;

	if (name == "Ivan")
	{
		std::cout << " Вы вошли под If" << std::endl;
	}
	else if (name == "")
	{
		std::cout << " Вы вошли под else If" << std::endl;
	}



	//1.2 оператор switch case fefault
	int type_of_creditor;   //1 = "physical", 
							//2 = "small_business"
							//3 = "medium_business"
							//4 = "large_business"

	std::cout << "\n \n type of creditor: \t";
	std::cin >> type_of_creditor;

	switch (type_of_creditor/*переменная которая подлежит сравнению*/)
	{
	case 1/*значение 1*/:
		std::cout << "Тип клиента - \"physical\"" << std::endl;
		break;
	case 2/*значение 2*/:
		std::cout << "Тип клиента - \"small_business\" " << std::endl;
		break;
	case 3/*зачение 3*/:
		std::cout << "Тип клиента - \"medium_business \"" << std::endl;
		break;
	case 4/*зачение 3*/:
		std::cout << "Тип клиента - \"large_business\" " << std::endl;
		break;
	default: //действия которые выполняются во всех прочих случаях

		break;
	}
		//1.3 тернарный оператор 
		int c = 10;
		//кратко условный переход помжно записать в одну строку if (c < 5) {} else {}
		//или в виде тернарного оператора (условие)?(ветка есть условие == true):(ветка если false)
		(c < 5)
			? (std::cout << "Тернарный оператор true" << std::endl/*оператор если true*/)
			: (std::cout << "Тернарный оператор false" << std::endl/*оператор если false*/);

		//1.4 оператор безусловного перехода goto
		//в современной разработке старается не применять,так как это как минимум уменьшается читаемость кода
		//синтаксис
		///в нужном месте программы создается т.н. метка;;
	lbl_1: //идентификатор (название) и двоеточие - это объявление метки
/*???*/

		c++;
		std::cout << "1.4. демонстрация goto. c=" << c << std::endl;
		if (c == 15) {goto lbl_exit;}
		{
			goto lbl_1;
		}
		lbl_exit:
	

		c++;
		std::cout << " \nконец\n" << c << std::endl;
		if (c == 15) { goto lbl_exit; } /// == сравнивает 2 числа
		
		for (int i = 0;/*начальное значение переменной-счетчика*/
			i < 7;//*условие продолжения, пока оно true  цикл продолжаеься */
			i++ /* повторяющийся оператор ,чаще всего - уменьшиение или увеличение счетчика */)
		{

		}
		/*2.3. цикл с пост-условием do...while
//самый первый заход в цикл выполняется всегда так как проверка выполняется после тела цикла
/*do {

// код который нужно повторять пока длится цикл (пока длится условие продолжения)
//заполнить самостоятятельно распечаткой к 15 октября

} while (задание: придумать и прописать условие условие пока оно == true, цикл выполняется)
//заполнить циклы соответствующим выводом на консоли по аналогии с прочими
//конструкторами и операторами чтобы было максимально очевидно что как и в каком порядке работает
//в конфе большинства пользовательских программ которые работают продолжительное время и не завершаются сами по себе как лаб. программы
//включен бесконечный цикл именно поэтому они работают продолжительное время*/


//2.1 счетный цикл for и операторы continue и break
//2.2. цикл с пред-условием while
		int example = 0;
		while (example < 15)/*задание придумать и прописать условие чтоб код запускался | условие, пока оно == true, цикл выполняется*/
		{
			example++;
			std::cout << "Идет код!" << example << std::endl;

		}


		int Apples;

		std::cout << "\n \n Выберите Цвет Яблок : \n 1- Красный\n 2- желтый\n 3-Зеленый\t";
		std::cin >> Apples; //1 Red apple
							//2 Yellow apple
							//3 Green apple

		switch (Apples/*переменная которая подлежит сравнению*/)
		{

		case 1/*значение 1*/:
			std::cout << "Цвет Яблок- \"Red\"" << std::endl;
			break;
		case 2/*значение 2*/:
			std::cout << "Цвет Яблок- \"Yellow \" " << std::endl;
			break;
		case 3/*зачение 3*/:
			std::cout << "Цвет Яблок- \"Green\"" << std::endl;
			break;
		default: //действия которые выполняются во всех прочих случаях

			break;
		}
		/*2.3. цикл с пост-условием do...while
		//самый первый заход в цикл выполняется всегда так как проверка выполняется после тела цикла
		/*do {

		// код который нужно повторять пока длится цикл (пока длится условие продолжения)
		//заполнить самостоятятельно распечаткой к 15 октября

		//git - система контроля версий при длительной разработке сохранять старые версии,промежуточные версии просто
		//необходимо особенно при работе в команде чтоб вручную не создавать большое количество копий папок и файлов
		//разработаны система контроля версия помимо git: git, mercurial, svn и др*/
		// для командной работы для хранение проекта  для публикации открытого кода и  т г д 
		// файлы проекта в месте со служебныйми фалами гит называется репозиторием 
		// если репозитории размешен на локальным машины если репоситории находится в сети он называется удааленным 
		// создается локальный репозитории с ним праводится работа по добавление файлов фиксирование версий создание слияние веток
		//затем результаты можно синхронизировать с удаленным репозитории
		//1 Способ чтобы завести репозии необходимо открыть консоль в каталоге  SHIFT + ПРАВЫЙ CLICK ОТКРЫТЬ POWERSHELL 
		//ввести комманду  "git init" 
		//создан пустой репозитории не один файл не отслежуется для этого необходимо ввести комманду "git add *.cpp"


std::system("pause"); // вызов функции system() из стандартной библиотеки 
	return 0;
}
#pragma endregion MainFunc2